﻿
@{
    ViewBag.Title = "Index";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <title>0xMusic</title>

    <!-- Bootstrap -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <style>
        #musicUploadBox {
            /*
            border: 10px dashed #ccc;
            width: 85%;
            min-height: 300px;
            margin: 20px 100px 20px 100px;
            */
            min-height: 300px;
            background-color: #dde3e9;
        }

        #musicUploadBox:hover 
        {
            background-color: #b6bfc8;
        }
        #musicUploadBox:drop {
            background-color: #b6bfc8;
        }
        progress {
            width: 85%;
        }

        progress:after {
            content: '%';
        }

        .fail {
            background: #c00;
            padding: 2px;
            color: #fff;
        }

        .hidden {
            display: none !important;
        }
    </style>
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>
<body>
    <div class="well text-center">
        <h1>0z Mx</h1>
    </div>
    <div class="container-fluid">
        <div class="row text-center">
            <div class="col-md-6">
                test
            </div>
            <div class="col-md-6">
                <div id="musicUploadBox">
                    <ul id="musicList" class="list-group"></ul>
                </div>
                <p id="upload" class="hidden"><label>Drag & drop not supported, but you can still upload via this input field:<br><input type="file"></label></p>
                <p id="filereader">File API & FileReader API not supported</p>
                <p id="formdata">XHR2's FormData is not supported</p>
                <p id="progress">XHR2's upload progress isn't supported</p>
                <p>Upload progress: <progress id="uploadprogress" max="100" value="0">0</progress></p>
                <p>Drag an image from your desktop on to the drop zone above to see the browser both render the preview, but also upload automatically to this server.</p>
            </div>
        </div>
    </div>



    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script>
        var songCount = 0;
        var tests =
            {
                filereader: typeof FileReader != 'undefined',
                dnd: 'draggable' in document.createElement('span'),
                formdata: !!window.FormData,
                progress: "upload" in new XMLHttpRequest
            }
        var support =
            {
                filereader: document.getElementById('filereader'),
                formdata: document.getElementById('formdata'),
                progress: document.getElementById('progress')
            }
        var acceptedTypes =
            {
                'audio/mpeg': true,
            }
        var progress = document.getElementById('uploadprogress');
        var fileupload = document.getElementById('upload');
        var musicList = document.getElementById('musicList');
        var musicUploadBox = document.getElementById('musicUploadBox');
        "filereader formdata progress".split(' ').forEach(function (api) {
            if (tests[api] === false) {
                support[api].className = 'fail';
            } else {
                support[api].className = 'hidden';
            }
        });

        var hash = {};
        function previewfile(file)
        {
            hash[file.name] = file;
            if (tests.filereader === true && acceptedTypes[file.type] === true) {
                musicList.innerHTML += '<li class="list-group-item" data-toggle="collapse" href="#songCollapse' + songCount + '">' + file.name + ' ' + file.size + '<div id="songCollapse' + songCount + '" class="panel- collapse collapse">' + getSongInfo(file) + '</div></li>';
                songCount += 1;
                console.log(file);
            }
            else {
                musicList.innerHTML += '<li class="list-group-item">FILE TYPE NOT SUPPORTED: ' + file.name + '</li>';
                console.log(file);
            }
        }

        function getSongInfo(file) {

            return '<span onclick=play("'+file.name+'") class="glyphicon glyphicon-play pull-left" ></span>' + file.name;
        }
        function play(fileName) {
            console.log(fileName);

        }
        function readfiles(files) {
            var formData = tests.formdata ? new FormData() : null;
            for (var i = 0; i < files.length; i++) {
                if (tests.formdata) {
                    formData.append('file', files[i]);
                }
                previewfile(files[i]);
            }

            // now post a new XHR request
            if (tests.formdata) {
                var xhr = new XMLHttpRequest();
                xhr.open('POST', '/devnull.php');
                xhr.onload = function () {
                    progress.value = progress.innerHTML = 100;
                };

                if (tests.progress) {
                    xhr.upload.onprogress = function (event) {
                        if (event.lengthComputable) {
                            var complete = (event.loaded / event.total * 100 | 0);
                            progress.value = progress.innerHTML = complete;
                        }
                    }
                }
                xhr.send(formData);
            }
        }

        if (tests.dnd) {
            musicUploadBox.ondragover = function () {
                this.className = 'hover';
                return false;
            };
            musicUploadBox.ondragend = function () {
                this.className = '';
                return false;
            };
            musicUploadBox.ondrop = function (e) {
                this.className = '';
                e.preventDefault();
                readfiles(e.dataTransfer.files);
            }
        } else {
            fileupload.className = 'hidden';
            fileupload.querySelector('input').onchange = function () {
                readfiles(this.files);
            };
        }

    </script>
</body>
</html>